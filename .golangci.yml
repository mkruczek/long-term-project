# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # skip-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor


# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: tab

  # print lines of code with issue, default is true
  print-issued-lines: false

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: false

  # sort-results by folder/file
  sort-results: true

  timeout: 3m0s

linters-settings:
  staticcheck:
    checks : ["all", "-SA1019", "-SA4004", "-SA4010"] #disable 1019(deprecated check), 4004(surrounding loop exited unconditionally), 4010(unused append)
    # remove disabled checks before deploy
    #  goimports:
    #    local-prefixes: xxx
  exhaustruct:
    # List of regular expressions to match struct packages and names.
    # If this list is empty, all structs are tested.
    # Default: []
    include:
    # List of regular expressions to exclude struct packages and names from check.
    # Default: []
    #exclude:
    #  - ""

# to run: golangci-lint run -v ./...
linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:               # comment / on-save-commonds
    - gofmt             # gofmt -s -w FILE
    - goimports         # goimports -w -local xxx FILE
    - govet             # go vet ./... ## NOTE: ideally 'go vet FILE' but that will complain of undeclared name from outside pkg. This is not a problem with ./...
    - deadcode          # let run in CI
    - varcheck          # let run in CI
    - typecheck         # let run in CI
    - ineffassign       # let run in CI
    - structcheck
    - unused
    #- unparam
    #- errcheck
    #- revive
    #- staticcheck
    #- gosimple